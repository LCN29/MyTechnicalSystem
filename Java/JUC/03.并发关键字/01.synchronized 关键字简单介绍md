# 01. synchronized 简单介绍

## 1. 作用

>1. 确保线程互斥的访问同步代码
>2. 保证同步代码块内对共享变量的修改能够及时可见
>3. 有效解决重排序问题

## 2. synchronized 的使用

![Alt 'SynchronizedUseInstruction'](https://raw.githubusercontent.com/PictureRespository/Java/main/JUC/SynchronizedUseInstruction.png)

如图: synchronized 可以用在 **方法**, **代码块** 2 种方式, 可以再区分为 5 个使用细节。

注：自己粗心踩过的一个坑
```java
public void method() {
    // 此时锁的不是 class 而是当前类的实例
    synchronized(SynchronizedDemo.this) {
    }   
}
```

## 3. synchronized 的执行过程

synchronized 关键字的实现是 Java 编译器和字节码解释器 2 者共同实现的。

在编译期, Javac 编译器将 Java 代码转变为 Class 文件, 会对 Java 代码中的 synchronized 关键字做出特殊的处理。
在运行期, JVM 中的字节码解析器根据 Class 文件中的内容触发 synchronized 锁的加锁和释放锁逻辑

### 3.1 编译器作用

* synchronized 锁方法

```java
/** 修饰 静态方法*/
public static synchronized void fn1() {
    int num = 1;
    num ++;
    System.out.println("num:" + num);
}
```

上面的代码经过 Javac 编译器编译为 class 文件后, 内容如下:

```
public static synchronized void fn1();
descriptor: ()V
flags: (0x0029) ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED
Code:
  stack=2, locals=1, args_size=0
     0: iconst_1
     1: istore_0
     2: iinc          0, 1
     5: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
     8: iload_0
     9: invokedynamic #3,  0              // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;
    14: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
    17: return
  LineNumberTable:
    line 15: 0
    line 16: 2
    line 17: 5
    line 18: 17
  LocalVariableTable:
    Start  Length  Slot  Name   Signature
        2      16     0   num   I
```

我们可以看到在 flags 后面有一个 ACC_SYNCHRONIZED 的标识 (可以把 synchronized 去掉打包后比较一下)。
这个标识作用是告诉 JVM, 这是一个同步方法(非静态方法也是一样的), 进入这个方法之前需要先获取锁。

* synchronized 锁代码块

```java
/** 修饰 代码块: 锁当类对象 */
public void fn3() {
    synchronized (DemoOne.class) {
        int num = 1;
        num ++;
        System.out.println("num:" + num);
    }
}
```

上面的代码经过 Javac 编译器编译为 class 文件后, 内容如下:

```class
public void fn3();
descriptor: ()V
flags: (0x0001) ACC_PUBLIC
Code:
  stack=2, locals=4, args_size=1
     0: ldc           #5                  // class com/can/DemoOne
     2: dup
     3: astore_1
     4: monitorenter
     5: iconst_1
     6: istore_2
     7: iinc          2, 1
    10: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
    13: iload_2
    14: invokedynamic #3,  0              // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;
    19: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
    22: aload_1
    23: monitorexit
    24: goto          32
    27: astore_3
    28: aload_1
    29: monitorexit
    30: aload_3
    31: athrow
    32: return
  Exception table:
     from    to  target type
         5    24    27   any
        27    30    27   any
  LineNumberTable:
    line 29: 0
    line 30: 5
    line 31: 7
    line 32: 10
    line 33: 22
    line 34: 32
  LocalVariableTable:
    Start  Length  Slot  Name   Signature
        7      15     2   num   I
        0      33     0  this   Lcom/can/DemoOne;
  StackMapTable: number_of_entries = 2
    frame_type = 255 /* full_frame */
      offset_delta = 27
      locals = [ class com/can/DemoOne, class java/lang/Object ]
      stack = [ class java/lang/Throwable ]
    frame_type = 250 /* chop */
      offset_delta = 4
```

我们查看 上面的 **Code** 模块, 会发有 1 个 **monitorenter** 和 2 个 **monitorexit**。其中的 monitorenter 和 第一个 monitorexit 同样是告诉 JVM 这是一个同步代码块, 进入之前需要先获取锁。至于第二个 monitorexit 是用于异常处理的, 当代码块出现了异常, 第一个 monitorexit 不会经过, 而是到了 第二个 monitorexit, 这样可以确保锁的正确的释放。

通过上面的 2 段字节码的分析, 可以发现代码中的 synchronized 关键字不见了, 经过编译器后, 变成了一个标识 (ACC_SYNCHRONIZED) 或者 3 个字节码指令 (1 个 monitorenter + 2 个 monitorexit)。


### 3.2 字节码解释器作用

每个方法的执行的内容对应 Class 文件的 Code 后面的字节码, 执行的过程需要搭配栈帧中的局部变量表和操作数栈, 而这个执行字节码的执行者, 就是字节码解释器。

每次方法执行时, 字节码解析器会依次读取 Code 中的字节码 (每个字节码都有自己的执行逻辑), 依照每个不同的字节码的特性, 从局部变量表/操作数栈中获取数据的输入项 (存在字节码不需要数据输入项), 处理完成, 如果有结果输出, 输出到操作数栈/局部变量表。

大体的执行过程如下:

![Alt 'InterpreterProcesses'](https://raw.githubusercontent.com/PictureRespository/Java/main/JUC/InterpreterProcesses.png)

当前 HotSpot 中存在 2 套字节码执行器: BytecodeInterpreter 和 TemplateInterpreter。 前者是通过 C++ 编写的。 虽然 C++ 编写的代码性能已经很不错了, 但是在 Java 中方法的执行的一个极度频繁的过程, 所以在 HotSpot 中基于模板的方式, 实现了一套以汇编语言实现的字节码解释器, 现在 HotSpot 默认使用的是 TemplateInterpreter。BytecodeInterpreter 和 TemplateInterpreter 2 者实现的逻辑都是一样的, 唯一不同的就是实现的语言不一样。

基于上面的介绍大体可以知道, synchronized 的**锁代码块**的实现基础, 逻辑基本可以确定就是下面这样了 (注: 在 HotSpot 的实现中, 和下面的代码没有类比性, C++ 的实现复杂很多)

```java

public class BytecodeInterpreter {

    public void byteCodeExecute() {

        // ...
        switch (byteCode) {

            case monitorenter:
                // 加锁
            break;
            case monitorexit : 

                // 释放锁
            break;    
        }
        // ...
        // 执行下一条字节码
    }
}
```

那么简单的推测**锁方法**的实现基础, 逻辑大体类似于下面

```java
public class BytecodeInterpreter {

    public void byteCodeExecute() {
        if (currentMethod.isSynchronized()) {
           // 加锁     
        }

        if (currentMethod.isSynchronized()) {
            // 释放锁
        }
    }
}
```

至于 isSynchronized 的返回值就取决于 Class 文件中对应的方法是否有 ACC_SYNCHRONIZED 标识符了。

插入一个小知识点: 在当前 Java 中用于修饰方法的修饰符有哪些, 修饰符有上限吗?  

答案: 在 Class 文件中使用了一个 16 个字节的 access_flags 存储 Java 方法的修饰符。分别如下:

| 标志名称 | 含义 | 取值 |
| :-: | :-:  | :-: |
| ACC_PUBLIC | 方法是否为 public | 0x0001 (0000 0000 0000 0001)|
| ACC_PRIVATE | 方法是否为 private | 0x0002 (0000 0000 0000 0010)|
| ACC_PROTECTED | 方法是否为 protected  | 0x0004 (0000 0000 0000 0100)|
| ACC_STATIC | 方法是否为 static | 0x0008 (0000 0000 0000 1000)|
| ACC_FINAL | 方法是否为 final | 0x0010 (0000 0000 0000 0001)|
| ACC_SYNCHRONIZED | 方法是否为 synchronized | 0x0020 (0000 0000 0001 0000)|
| ACC_BRIDGE | 是否为编译器生成的桥接方法 | 0x0040 (0000 0000 0010 0000)|
| ACC_VARARGS | 方法是否接受不定参数 | 0x0080 (0000 0000 0100 0000)|
| ACC_NATIVE | 方法是否为 native | 0x0100 (0000 0000 1000 0000)|
| ACC_ABSTRACT | 方法是否为 abstract | 0x0400 (0000 0010 0000 0000)|
| ACC_STRICT | 方法是否为 strictfp | 0x0800 (0000 0100 0000 0000)|
| ACC_SYNTHETIC | 方法是否为编译器自动产生 | 0x1000 (0000 1000 0000 0000)|

中间少了 1 个 0x0200 !

## 4. 由 synchronized 锁引申出来的几个锁概念

### 4.1 锁消除  

在动态编译同步块的时候, JIT编译器可以借助一种被称为逃逸分析 (Escape Analysis) 的技术来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果是的话, 就不为其生成 synchronized 的相关的字节码指令

```java
public void method() {
    // jit 通过逃逸判断出方法有且只有一个线程会执行到，会将其优化
    synchronized(Lock.class) {
        doSomethings();
    }
}

public void method() {
    // 优化后的等效代码
    doSomethings();
}
```

### 4.2 锁粗化   
对于相邻的几个同步块, 如果这些同步块使用的是同一个锁实例, 那么 JIT 编译器会将这些同步块合并为一个大同步块, 从而避免了一个线程反复申请/释放同一个锁所导致的开销

```java
public void method() {
    for (int i = 0; i < 10; i++) {
        synchronized(Lock.class) {
            doSomethings1();
        }
    }
}

// 优化后
public void method() {
    synchronized(Lock.class) {
        for (int i = 0; i < 10; i++) {
            doSomethings();
        }
    }
}
```

### 4.3 自旋锁   
在申请一个锁时, 如果这个锁被另一个线程持有着, 那么当前的线程就需要被挂起, 进入阻塞状态。但是很多时候, 锁的持有时间很短, 这时候挂起线程不值得, 可以让当前线程执行循环等待锁释放, 不让出 CPU。待锁释放时, 在进行锁获取。在指定的获取锁失败的时间内, 还没获取到锁的话, 再将其挂起。但是这种优化存在问题: 锁被其他线程长时间占用, 一直不释放 CPU, 会带来许多的性能开销.

### 4.4 自适应自旋锁 
在自旋锁的基础上进行优化: 它的自旋的次数不再固定, 其自旋的次数由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定

### 4.5 锁膨胀 (锁升级)  
在 JDK 6 之后, JVM 对 synchronized 的锁机制做了优化, 从原来的无锁直接借助操作系统上锁的机制, 修改为锁缓慢升级的, 在运行中，根据线程对锁的竞争程度，逐渐升级, 由无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁的过程。

## 5. 了解 synchronize 前需要知道的一点知识


### 5.1 Java 实例对象内存布局

在 HotSpot 虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头 (Object Header), 实例数据 (Instance Data) 和对齐填充 (Padding) 。  
如图:
![Alt 'JavaInstanceMemoryLayout'](https://raw.githubusercontent.com/PictureRespository/Java/main/JVM/JavaInstanceMemoryLayout.png)

#### 5.1.1 Object Header

Java 实例的对象头主要包含 2/3 个部分, 如果是对象的话, 只包含 2 部分 Mark Word 和 Class Pointer, 如果是对象的话, 还会多一个 Array Length。

**Mark Word**: 用于存储对象自身的运行时数据, 如哈希码（HashCode）, GC分代年龄, 锁状态标志, 线程持有的锁, 偏向线程ID, 偏向时间戳等。
这一部分在 32 位系统里面的大小为 4 个字节, 而 64 位系统里面则为 8 个字节。

在 32 位系统中, HotSpot 里面的 Mark Work 正常情况(无锁状态)的分布如下:

![Alt 'MarkWorkContentInNoLock'](https://raw.githubusercontent.com/PictureRespository/Java/main/JVM/MarkWorkContentInNoLockWhen32bSystem.png)

64 位系统的话, 如图:
![Alt 'MarkWorkContentInNoLock'](https://raw.githubusercontent.com/PictureRespository/Java/main/JVM/MarkWorkContentInNoLockWhen64bSystem.png)

后面说的对象内存布局都是基于 32 位的实现, 虽然现在的系统都是 64 位, 但是为了性能, 节省空间等, JVM 中通过**指针压缩技术**, 在 64 位系统中, 用 32 位的指针进行寻址,  达到了 32 位的高速寻址同时, 还能利用 64 位系统的大内存, 突破 4 GB 运行内存限制。

**Klass Pointer**: 类型指针, 即对象指向它的类型元数据的指针, Java 虚拟机通过这个指针来确定该对象是哪个类的实例 (并不是所有的虚拟机实现都必须在对象数据上保留类型指针,
也就是, 查找对象的元数据信息并不一定要经过对象本身)。 这一部分在 32 位系统里面的大小为 4 个字节, 而 64 位系统里面则为 8 个字节。

**Length**: 当我们的对象实例是数组对象的话, 对象头里面还会有一个用于记录数组长度的数据, 大小为 4 个字节, 主要用于确定对象的大小。因为普通的 Java 对象可以通过
元数据推算出对象的大小, 但是数组的长度不确定时, 无法推算出数组的大小。

#### 5.1.2 instance data/ array data  
这个就是这个实例存储的数据了, 也就是属性, 包含的引用等

#### 5.1.3 padding  
这个选项不是每个对象都有的, 它的作用只是为了让这个 Java 实例所占的内存是 8 的倍数。既上面的 Object Header + instance data / array data + padding 所占的内存必定是 8 的倍数, 当前面 2 个占的内存已经是 8 的倍数了, padding 理所当然可以不需要了。

### 5.2 Mark Word 

在 Java 的实例对象内存布局中, Mark Word 不是一成不变的, 当一个对象被当做 **synchronized** 锁的对象的话, 其内容会不断的变化

如图: 32 位 Mark Word 的布局:
![Alt '32bitMarkWordLayout'](https://raw.githubusercontent.com/PictureRespository/Java/main/JUC/32bitMarkWordLayout.png)

64 位 Mark Word 的布局:
![Alt '64bitMarkWordLayout'](https://raw.githubusercontent.com/PictureRespository/Java/main/JUC/64bitMarkWordLayout.png)

一个对象当前处于什么样的状态, 可以通过其 Mark Work 得知。

一个对象当前处于什么样的状态, 可以通过其 Mark Work 得知。

当对象处于偏向锁状态时, 会将当前持有这个对象锁的线程的 ID 存储在 Mark Word 中, 后续这个线程对这个对象的锁的获取, 直接默认就是成功的。

轻量级锁, 存储的不是当前线程的 ID, 而是一个叫做 **Lock Record** 的对象。这个对象的内容很简单。

```java
public class LockRecord {
    private DisplacedMarkWord displacedmarkWord;
    private LockPointer obj;
}
```

Displaced Mark Word: 就是锁对象在无锁情况下 Mark Word 的内容。  
obj: 一个指向当前锁对象的指针。

当对象处于轻量级锁时, 首先在当前方法栈中找出一个空闲的 Lock Record, 然后将锁对象无锁状态的 Mark Word 存储在 Record Lock, 再让 Record Lock 的 obj 指向当前的锁对象, 最后在将当前锁对象变为轻量级锁状态, 把里面的锁记录指针执行这个 Lock Record。

大概如下:
![Alt 'LockRecordAndLockRelation'](https://raw.githubusercontent.com/PictureRespository/Java/main/JUC/LockRecordAndLockRelation.png)

重量级锁和轻量级锁有点类似, 不同的时锁对象的 Mark Word 里面不是指向 Lock Record, 而是执行了和当前对象匹配的一个 Object Monitor 对象。

## 6. 参考

[第232页 7.2.1 Interpreter模块](https://book.douban.com/annotation/31407691/)  
《深入理解Java虚拟机：JVM高级特性与最佳实践（第3版》 -- 周志明