```java
final boolean acquireQueued(final Node node, int arg) {

    // 是否需要通知当前线程中断
    boolean interrupted = false;
    try {
        for (;;) {
        
            // 获取当前节点的前驱节点
            final Node p = node.predecessor();
            
            // 2 前驱节点是头节点并且成功获取同步状态, 即可以获得独占式锁
            // 在上面创建 addWaiter 方法可以知道, 同步链表为空, 会创建一个默认值的头节点 head, 再把新节点放到这个头节点前面
            // 如果一个节点的前驱节点为头节点, 就可以判断出这个节点为链表中真正数据的第一个节点
            if (p == head && tryAcquire(arg)) {
                // 当前节点设置为 头结点
                // 设置头结点 = node
                // 设置 node.thread = null
                // 设置 node.prev = null
                // 这时候头节点的状态为 signal (-1)
                setHead(node);
                p.next = null;
                return interrupted;
            }
            
            // 3 获取锁失败, 线程进入等待状态等待获取独占式锁
            // shouldParkAfterFailedAcquire 主要是判断当前的节点里面的线程是否可以挂起, 
            // 返回 true 的条件: node 的前驱节点的状态为 signal (等待唤醒的状态), 前驱在等待唤醒, 那么这个节点先挂起
            // parkAndCheckInterrupt 这时会挂起线程, 阻塞住, 直到被唤醒获取中断
            if (shouldParkAfterFailedAcquire(p, node))
                // | 或运算, 只要有一个真, 就是真
                // interrupted 默认为 false, parkAndCheckInterrupt() 返回了 true, 那么 interrupted 就会为 true
                interrupted |= parkAndCheckInterrupt();
        }
    } catch (Throwable t) {
        // 上面的逻辑出现了异常了, 正常的情况就是线程的中断标识为 true, 但是挂起了, 或者挂起中, 被中断了
        // 取消获取锁
        cancelAcquire(node);
        // 需要设置中断标识, 
        if (interrupted)
            selfInterrupt();
        throw t;
    }
}

private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {

    int ws = pred.waitStatus;
    // 前驱节点的状态为 signal 
    // signal 表示得到唤醒的状态, 安全的, 当前线程可以挂起
    if (ws == Node.SIGNAL)
        return true;

    // > 0, 状态为取消状态
    if (ws > 0) {    

        // 从当前节点, 也就是尾结点, 一直往前找到状态不为 CANCELLED (1) 的节点,
        // 也就是找到队列中最后一个不是取消状态的节点, 放到他的后面
        // 效果: 从尾结点到最后一个不为 CANCELLED 状态的节点之间所有的 CANCELLED 状态的节点都被删除
        do {
            node.prev = pred = pred.prev;
        } while (pred.waitStatus > 0);

        pred.next = node;
    } else {
        // 将前驱节点设置为 SIFNAL 状态, 表示线程等待唤醒
        pred.compareAndSetWaitStatus(ws, Node.SIGNAL);
    }
    // 返回 false, 表示当前的线程还不能挂起, 再走一遍循环
    return false;
}

private final boolean parkAndCheckInterrupt() {
    //使得该线程挂起, 知道被唤醒
    LockSupport.park(this);
    // 返回当前线程的中断标识
    return Thread.interrupted();
}
```