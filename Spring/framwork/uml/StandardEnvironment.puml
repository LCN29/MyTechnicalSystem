@startuml

class StandardEnvironment{
}

abstract class AbstractEnvironment{

    MutablePropertySources propertySources;
    ConfigurablePropertyResolver propertyResolver;

    String resolveRequiredPlaceholders(String text) throws IllegalArgumentException;
}

interface ConfigurableEnvironment {
    void setActiveProfiles(String... profiles);
    void addActiveProfile(String profile);
    void setDefaultProfiles(String... profiles);
    MutablePropertySources getPropertySources();
    Map<String, Object> getSystemProperties();
    Map<String, Object> getSystemEnvironment();
    void merge(ConfigurableEnvironment parent);
}

interface Environment {
    String[] getActiveProfiles();
    String[] getDefaultProfiles();
    boolean acceptsProfiles(Profiles profiles);
}

interface ConfigurablePropertyResolver {
    ConfigurableConversionService getConversionService();
    void setConversionService(ConfigurableConversionService conversionService);
    void setPlaceholderPrefix(String placeholderPrefix);
    void setPlaceholderSuffix(String placeholderSuffix);
    void setValueSeparator(String valueSeparator);
    void setIgnoreUnresolvableNestedPlaceholders(boolean ignoreUnresolvableNestedPlaceholders);
    void setRequiredProperties(String... requiredProperties);
    void validateRequiredProperties() throws MissingRequiredPropertiesException;
}

interface PropertyResolver {

    boolean containsProperty(String key);
    String getProperty(String key);
    String getProperty(String key, String defaultValue);
    T getProperty(String key, Class<T> targetType);
    T getProperty(String key, Class<T> targetType, T defaultValue);
    String getRequiredProperty(String key) throws IllegalStateException;
    T getRequiredProperty(String key, Class<T> targetType) throws IllegalStateException;
    String resolvePlaceholders(String text);
    String resolveRequiredPlaceholders(String text) throws IllegalArgumentException;
}

interface Iterable {
}

interface PropertySources {
    boolean contains(String name);
    PropertySource<?> get(String name);
}

abstract class PropertySource {
    String name;
    T source;
}

class MutablePropertySources {
    List<PropertySource<?>> propertySourceList
}

abstract class AbstractPropertyResolver {
}

class PropertySourcesPropertyResolver {
}

StandardEnvironment -down-|> AbstractEnvironment
AbstractEnvironment ..|> ConfigurableEnvironment
ConfigurableEnvironment -right-|> Environment
ConfigurableEnvironment -down-|> ConfigurablePropertyResolver
Environment -|> PropertyResolver
ConfigurablePropertyResolver -down-|> PropertyResolver
PropertySources -left-|> Iterable
MutablePropertySources ..|> PropertySources
AbstractEnvironment -left--> MutablePropertySources
PropertySources -down--> PropertySource

AbstractPropertyResolver ..|> ConfigurablePropertyResolver
PropertySourcesPropertyResolver --|> AbstractPropertyResolver
AbstractEnvironment -right--> PropertySourcesPropertyResolver

@enduml