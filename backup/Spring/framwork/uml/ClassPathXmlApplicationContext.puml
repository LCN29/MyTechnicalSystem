@startuml

class ClassPathXmlApplicationContext {
}

class DefaultResourceLoader {
}


abstract class AbstractXmlApplicationContext {

    void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException;
}

abstract class AbstractRefreshableConfigApplicationContext {
}

abstract class AbstractRefreshableApplicationContext {

    DefaultListableBeanFactory beanFactory;

    void refreshBeanFactory();
    DefaultListableBeanFactory createBeanFactory();
}

abstract class AbstractApplicationContext {

    ResourcePatternResolver resourcePatternResolver;
    ApplicationContext parent;
    ConfigurableEnvironment environment;
    Object startupShutdownMonitor;
    Set<ApplicationListener<?>> applicationListeners;
    Set<ApplicationListener<?>> earlyApplicationListeners;
    Set<ApplicationEvent> earlyApplicationEvents;


    + ConfigurableEnvironment getEnvironment();
    + void refresh();
    # ResourcePatternResolver getResourcePatternResolver();
    # ConfigurableEnvironment createEnvironment();
    # void prepareRefresh();
}

interface BeanNameAware {
    void setBeanName(String name);
}

interface Aware {
}

interface InitializingBean {
    void afterPropertiesSet() throws Exception;
}

interface ConfigurableApplicationContext{
    void setActiveProfiles(String... profiles);
    void addActiveProfile(String profile);
    void setDefaultProfiles(String... profiles);
    MutablePropertySources getPropertySources();
    Map<String, Object> getSystemProperties();
    Map<String, Object> getSystemEnvironment();
    void merge(ConfigurableEnvironment parent);
}

interface Lifecycle {

    void start();
    void stop();
    boolean isRunning();
}

interface Closeable {
    void close() throws IOException;
}

interface AutoCloseable {
    void close() throws Exception;
}

interface ApplicationContext {
    String getId();
    String getApplicationName();
    String getDisplayName();
    long getStartupDate();
    ApplicationContext getParent();
    AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException;
}

interface EnvironmentCapable {
    Environment getEnvironment();
}

interface ListableBeanFactory {
    boolean containsBeanDefinition(String beanName);
    int getBeanDefinitionCount();
    String[] getBeanDefinitionNames();
    String[] getBeanNamesForType(ResolvableType type);
    String[] getBeanNamesForType(Class<?> type);
    String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit);
    Map<String, T> getBeansOfType(Class<T> type) throws BeansException;
    Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException;
    String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType);
    Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException;
    A findAnnotationOnBean(String beanName, Class<A> annotationType) throws NoSuchBeanDefinitionException;
}

interface HierarchicalBeanFactory {
    BeanFactory getParentBeanFactory();
    boolean containsLocalBean(String name);
}

interface BeanFactory {
    String FACTORY_BEAN_PREFIX = "&";

    Object getBean(String name) throws BeansException;
    T getBean(String name, Class<T> requiredType) throws BeansException;
    Object getBean(String name, Object... args) throws BeansException;
    T getBean(Class<T> requiredType) throws BeansException;
    T getBean(Class<T> requiredType, Object... args) throws BeansException;
    ObjectProvider<T> getBeanProvider(Class<T> requiredType);
    ObjectProvider<T> getBeanProvider(ResolvableType requiredType);
    boolean containsBean(String name);
    boolean isSingleton(String name) throws NoSuchBeanDefinitionException;
    boolean isPrototype(String name) throws NoSuchBeanDefinitionException;
    boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException;
    boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;
    Class<?> getType(String name) throws NoSuchBeanDefinitionException;
    String[] getAliases(String name);
}

interface MessageSource {
    String getMessage(String code, Object[] args, String defaultMessage, Locale locale);
    String getMessage(String code, Object[] args, Locale locale) throws NoSuchMessageException;
    String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException;
}

interface ApplicationEventPublisher {
    void publishEvent(Object event);
}

interface ResourcePatternResolver {
    String CLASSPATH_ALL_URL_PREFIX = "classpath*:";

    Resource[] getResources(String locationPattern) throws IOException;
}

interface ResourceLoader {
    String CLASSPATH_URL_PREFIX = "classpath:";

    Resource getResource(String location);
    ClassLoader getClassLoader();
}



ClassPathXmlApplicationContext -down-|> AbstractXmlApplicationContext
AbstractXmlApplicationContext -down-|> AbstractRefreshableConfigApplicationContext
AbstractRefreshableConfigApplicationContext -down-|> AbstractRefreshableApplicationContext
AbstractRefreshableConfigApplicationContext -left..|> BeanNameAware
AbstractRefreshableConfigApplicationContext -right..|> InitializingBean
BeanNameAware -down-|> Aware
AbstractRefreshableApplicationContext -down-|> AbstractApplicationContext
AbstractApplicationContext -left-|> DefaultResourceLoader
DefaultResourceLoader -down-|> ResourceLoader

AbstractApplicationContext ..|> ConfigurableApplicationContext
ConfigurableApplicationContext -down-|> ApplicationContext
ConfigurableApplicationContext -down-|> Lifecycle
ConfigurableApplicationContext -right-|> Closeable
Closeable -down-|> AutoCloseable
ApplicationContext -down-|> EnvironmentCapable
ApplicationContext -down-|> MessageSource
ApplicationContext -down-|> ApplicationEventPublisher
ApplicationContext -up|> ResourcePatternResolver
ApplicationContext -down-|> HierarchicalBeanFactory
ApplicationContext -down-|> ListableBeanFactory
HierarchicalBeanFactory -down-|> BeanFactory
ListableBeanFactory -down-|> BeanFactory
ResourcePatternResolver -|> ResourceLoader

@enduml